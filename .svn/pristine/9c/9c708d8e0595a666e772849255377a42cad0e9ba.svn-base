package at.ac.univie.knasmueller.argos.explorer;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.List;
import java.util.Map;

import at.ac.univie.knasmueller.hulk.HulkFile;
import at.ac.univie.knasmueller.hulk.HulkProject;
import at.ac.univie.knasmueller.hulk.SpecifiedPosition;
import at.cibiv.ngs.tools.fasta.FastaTools;

public class Explorer {

	public static void createRandomGenome(int length, int chromosomes, File out)
			throws IOException {
		if (!out.exists()) {
			out.getParentFile().mkdirs();
			out.createNewFile();
		} else {
			throw new IOException("Target file already exists.");
		}
		PrintStream outStream = new PrintStream(new FileOutputStream(out));
		FastaTools.createRandomFasta(length, chromosomes, outStream);
	}

	public static void runArgos(String inputGenome, String outputFolder,
			String tempFolder, int readLength, int stepSize) {
		try {
			ProcessBuilder builder = new ProcessBuilder("bash",
					"/home/CIBIV/bernhard_/argos-eval/run.sh", "-g",
					inputGenome, "-o ", outputFolder, "-t", tempFolder, "-rl",
					((Integer) readLength).toString(), "-step",
					((Integer) stepSize).toString() /*
													 * , ">", "/dev/null",
													 * "2>&1"
													 */);
			builder.directory(new File("/home/CIBIV/bernhard_/argos-eval/"));

			Map<String, String> env = builder.environment();
			String path = env.get("PATH");
			String libPath = "/usr/local/bin/python:/software/ngm/bin-linux/:/software/sge-2011.11/bin/linux-x64:/usr/lib64/mpi/gcc/openmpi/bin:/home/CIBIV/bernhard_/bin:/usr/local/bin:/usr/bin:/bin:/usr/bin/X11:/usr/X11R6/bin:/usr/games:/opt/kde3/bin:/usr/lib/mit/bin:/usr/lib/mit/sbin";
			path = path + File.pathSeparator + libPath;
			env.put("PATH", path);

			Process p = builder.start();
			List<String> ls = builder.command();

			for (String s : ls) {
				System.out.println(s);
			}

			String output = loadStream(p.getInputStream());
			String error = loadStream(p.getErrorStream());
			int rc = p.waitFor();
			System.out.println("Process ended with rc=" + rc);
			System.out.println("\nStandard Output:\n");
			System.out.println(output);
			System.out.println("\nStandard Error:\n");
			System.out.println(error);

		} catch (IOException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			System.out.println("Process is done; output was written to "
					+ outputFolder);
		}
	}
	
	private static void introduceMutations(File genome) {
		HulkProject p = new HulkProject("hulkTemp", new File("hulkResult"));
		try {
			HulkFile hf = new HulkFile(p, genome);
			HulkFile fragment = hf.copy(new SpecifiedPosition(genome, "chr1", 12500), 10000);
			hf.insert(fragment, new SpecifiedPosition(hf.getFileAbs(), "chr1", 90000));
			hf.save("150k_with_insertion.fa");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private static String loadStream(InputStream s) throws Exception {
		/*
		 * from
		 * http://stackoverflow.com/questions/4225663/problem-processbuilder
		 * -running-script-sh
		 */
		BufferedReader br = new BufferedReader(new InputStreamReader(s));
		StringBuilder sb = new StringBuilder();
		String line;
		while ((line = br.readLine()) != null)
			sb.append(line).append("\n");
		return sb.toString();
	}

	public static void main(String[] args) {
		File randomGenome = new File(
				"/home/CIBIV/bernhard_/argos-eval/genomes/random150k.fa");
		if (!randomGenome.exists()) {
			try {
				Explorer.createRandomGenome(150000, 3, randomGenome); /*
																	 * only work
																	 * with the
																	 * first 2
																	 * chromosomes
																	 * ; last
																	 * one
																	 * always
																	 * makes
																	 * issues
																	 * with
																	 * bigWig
																	 * Files
																	 */
				System.out.println("Created random genome at: " + randomGenome);
			} catch (IOException e) {
				e.printStackTrace();
			} finally {

			}
		}
		
		// introduce mutations
		introduceMutations(randomGenome);
		

		String homeDir = "/home/CIBIV/bernhard_/argos-eval/";
		Explorer.runArgos(homeDir + "hulkResult/150k_with_insertion.fa", homeDir
				+ "output/0002/", homeDir + "tmp2/0002/", 100, 5);

		System.out.println("Done.");
	}

}
