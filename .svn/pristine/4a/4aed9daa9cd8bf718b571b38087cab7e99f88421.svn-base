package at.ac.univie.knasmueller.hulk;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

import at.cibiv.ngs.tools.util.GenomicPosition;

public class HulkProject {
	File resultDir;
	File tempDir;
	ILogger iLogger;
	int tempFileCounter;
	Map<Integer, File> tempFiles;

	public File getTempDir() {
		System.out.println("tempDir: " + this.tempDir);
		return this.tempDir;
	}

	public int addTempFile(HulkFile file) {
		this.tempFiles.put(this.incrementTempFileCounter(), file.getFileAbs());
		
		return 0;
	}

	private int incrementTempFileCounter() {
		this.tempFileCounter += 1;
		return this.tempFileCounter - 1;
	}

	public HulkProject(String tempDir, File resultDir) {
		this.tempFileCounter = 0;
		this.tempFiles = new HashMap<Integer, File>();

		boolean success = (new File(tempDir + "/tmp")).mkdirs();
		if (!success && !Files.exists(new File(tempDir + "/tmp").toPath())) {
			throw new RuntimeException("could not create tmp dir");
		}
		this.tempDir = new File(tempDir + "/tmp/"); // in tempDir: a folder
													// "temp" is created

		this.resultDir = resultDir;
		ILogger iLogger = new FileLogger(new File(this.tempDir + "/log.txt"));
		this.iLogger = iLogger;
	}

	public ILogger getILogger() {
		return this.iLogger;
	}

	void close() {
		System.out.println("Call to close() - delete all temp files");

		// removes all created temp-files including the created "tmp" folder
		for (Map.Entry<Integer, File> entry : this.tempFiles.entrySet()) {
			System.out.println("Key = " + entry.getKey() + ", Value = "
					+ entry.getValue());
			entry.getValue().delete();
		}
		try {
			boolean success = this.tempDir.delete();
			if (!success) {
				System.out
						.println("Could not delete tmp-Folder at " + this.tempDir + "/tmp" + " - maybe it's not empty?");
			}
		} catch (Exception e) {
			System.out
					.println("Could not delete tmp-Folder; " + e.getMessage());
		}

	}

	public static void main(String[] args) throws FileNotFoundException,
			IOException {
		HulkProject p = new HulkProject("/tmp/", new File(
				"/project/bakk/testRuns/test_2014-05-18"));

		HulkFile testGenome = new HulkFile(p, new File(
				"/project/bakk/genomes-test/ecoli2-test.fa"));
		HulkFile copiedFragment = testGenome.copy(new SpecifiedPosition(
				new File("/project/bakk/genomes-test/ecoli2-test.fa"), "chr2",
				0), 10);
		System.out.println("Copied Fragment: " + copiedFragment.getFileAbs());
//
//		HulkFile testWithFragment = testGenome
//				.insert(copiedFragment,
//						new SpecifiedPosition(new File(
//								"/project/bakk/genomes-test/ecoli2-test.fa"),
//								"chr1", 0));
//
//		System.out.println("Test with Fragment: "
//				+ testWithFragment.getFileAbs());
//		System.out.println("Try to move file to result..." + p.getResultDir());
//		testWithFragment.save("testWithFragment");
		p.close();

	}

	public File getResultDir() {
		return this.resultDir;
	}
}
